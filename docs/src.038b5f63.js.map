{"version":3,"sources":["index.js"],"names":["projection","d3","geoEquirectangular","center","scale","path","geoPath","sliders_begin","sliders_end","pop_list","generatePopulation","slider1","createD3RangeSlider","onChange","newRange","select","text","begin","toLocaleString","end","updateFilter","range","slider2","slider3","slider4","filterList","selectAll","_groups","dataLoc","require","csv","data","k","length","i","j","id","substring","A2","l","attribute","Name","Value","classed","getTextBox","selection","each","d","bbox","getBBox","list","push","readPopulation","country","tablename","document","getElementById","innerText","parseInt","$","window","resize","svg","attr","width","height","append","json","countriesGroup","countries","features","enter","properties","iso_a3","on","console","log","name","pop2","pop","countryLabels"],"mappings":"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","file":"src.038b5f63.js","sourceRoot":"../src","sourcesContent":["      // DEFINE FUNCTIONS/OBJECTS\n      // Define map projection\n      var projection = d3\n        .geoEquirectangular()\n        .center([0, 15]) // set centre to further North as we are cropping more off bottom of map\n        .scale(200) // scale to fit group width\n      ;\n\n      // Define map path\n      var path = d3\n        .geoPath()\n        .projection(projection)\n      ;\n\n    var sliders_begin = [0, 0, 0, 0];\n    var sliders_end = [0, 0, 0, 0];\n    var pop_list = generatePopulation();\n\n\n    var slider1 = createD3RangeSlider(0, 2000000000, \"#slider-container1\");\n\n    slider1.onChange(function(newRange){\n        d3.select(\"#range-label1\").text(newRange.begin.toLocaleString() + \" - \" + newRange.end.toLocaleString());\n        sliders_begin[0] = newRange.begin;\n        sliders_end[0] = newRange.end;\n        updateFilter();\n    });\n\n    slider1.range(0, 0);\n\n\n     var slider2 = createD3RangeSlider(0, 2000000000, \"#slider-container2\");\n\n    slider2.onChange(function(newRange){\n        d3.select(\"#range-label2\").text(newRange.begin.toLocaleString() + \" - \" + newRange.end.toLocaleString());\n        sliders_begin[1] = newRange.begin;\n        sliders_end[1] = newRange.end;\n        updateFilter();\n    });\n\n    slider2.range(0,0);\n\n\n var slider3 = createD3RangeSlider(0, 2000000000, \"#slider-container3\");\n\n    slider3.onChange(function(newRange){\n        d3.select(\"#range-label3\").text(newRange.begin.toLocaleString() + \" - \" + newRange.end.toLocaleString());\n        sliders_begin[2] = newRange.begin;\n        sliders_end[2] = newRange.end;\n        updateFilter();\n    });\n\n    slider3.range(0,0);\n\n\n var slider4 = createD3RangeSlider(0, 1367485388, \"#slider-container4\");\n\n    slider4.onChange(function(newRange){\n        d3.select(\"#range-label4\").text(newRange.begin.toLocaleString() + \" - \" + newRange.end.toLocaleString());\n        sliders_begin[3] = newRange.begin;\n        sliders_end[3] = newRange.end;\n        updateFilter();\n    });\n\n    slider4.range(0,1367485388);\n\n\n      function updateFilter() {\n        filterList = d3.selectAll(\".country\")._groups[0];\n        const dataLoc = require('./code_to_fullname.csv');\n        // console.log(dataLoc);\n        d3.csv(dataLoc, function(data) {\n        for (k = 0; k < sliders_begin.length; k++) {\n          for (i = 0; i < filterList.length; i++) {\n            for (j = 0; j < data.length; j++) {\n              if (filterList[i].id.substring(7) == data[j].A2) {\n                attribute = \"\";\n                // Going to need to make sure that we have an if branch for each\n                // of the 4 sliders so that we don't overwrite all the countries that are being dropped off\n                // with just the last slider (Right now only 4th slider affects the map)\n                for (l = 0; l < pop_list.length; l++) {\n                  if (data[j].Name == pop_list[l][\"Name\"]) {\n                    attribute = pop_list[l].Value;\n                  }\n                }\n                if (attribute < sliders_begin[k] || attribute > sliders_end[k]) { \n                  d3.select(filterList[i]).classed(\"country-filtered\", true);\n                } else {\n                  d3.select(filterList[i]).classed(\"country-filtered\", false);\n                }\n              }\n            }\n          }\n        }\n        })\n      }\n\n      function getTextBox(selection) {\n        selection\n          .each(function(d) {\n            d.bbox = this\n              .getBBox();\n            })\n        ;\n      }\n\n\n       function generatePopulation() {\n        const dataLoc = require('./population.csv');\n        // console.log(dataLoc);\n        var list = [];\n        d3.csv(dataLoc, function(data) {\n          // console.log(data[0].Value);\n          for (var i = 0; i < data.length; i++) {\n            list.push(data[i]);\n          }\n        })\n        return list;\n      }\n\n      // use poplist TODO\n      function readPopulation(country, tablename) {\n        const dataLoc = require('./population.csv');\n        // console.log(dataLoc);\n        d3.csv(dataLoc, function(data) {\n          // console.log(data[0].Value);\n          for (var i = 0; i < data.length; i++) {\n            if (data[i][\"Name\"] == country) {\n              document.getElementById(tablename).innerText = parseInt(data[i].Value).toLocaleString();\n            }\n          }\n        })\n      }\n      \n      // on window resize\n      $(window).resize(function() {\n        // Resize SVG\n        svg\n          .attr(\"max-width\", $(\"#map-holder\").width())\n          .attr(\"max-height\", $(\"#map-holder\").height())\n        ;\n      });\n\n      // create an SVG\n      var svg = d3\n        .select(\"#map-holder\")\n        .append(\"svg\")\n        // set to the same size as the \"map-holder\" div\n        // .attr(\"width\", $(\"#map-holder\").width())\n        // .attr(\"height\", $(\"#map-holder\").height())\n        .attr(\"viewBox\", \"0, 0, 1200, 600\")\n      ;\n\n\n      // get map data\n      d3.json(\n        \"https://raw.githubusercontent.com/andybarefoot/andybarefoot-www/master/maps/mapdata/custom50.json\",\n        function(json) {\n          //Bind data and create one path per GeoJSON feature\n          countriesGroup = svg.append(\"g\").attr(\"id\", \"map\");\n          // add a background rectangle\n          countriesGroup\n            .append(\"rect\")\n            .attr(\"x\", 0)\n            .attr(\"y\", 0)\n            .attr(\"width\", 3000)\n            .attr(\"height\", 1500)\n\n          // draw a path for each feature/country\n          countries = countriesGroup\n            .selectAll(\"path\")\n            .data(json.features)\n            .enter()\n            .append(\"path\")\n            .attr(\"d\", path)\n            .attr(\"id\", function(d, i) {\n              return \"country\" + d.properties.iso_a3;\n            })\n            .attr(\"class\", \"country\")\n            // add a mouseover action to show name label for feature/country\n            .on(\"mouseover\", function(d, i) {\n              d3.selectAll(\".country\").classed(\"country-hover\", false);\n\n              if (d3.select(this).classed(\"country-filtered\") || d3.select(this).classed(\"country-click_hover\")) {\n              } else if (d3.select(this).classed(\"country-click\")) {\n                console.log(\"hello\")\n                d3.select(this).classed(\"country-click_hover\", true)\n                document.getElementById(\"table-country-name2\").innerText = d.properties.name;\n                pop2 = readPopulation(d.properties.name, \"table-country-pop2\");\n              } else {\n                d3.select(this).classed(\"country-hover\", true);\n                document.getElementById(\"table-country-name2\").innerText = d.properties.name;\n                pop2 = readPopulation(d.properties.name, \"table-country-pop2\");\n              }\n            })\n            .on(\"mouseout\", function(d, i) {\n                document.getElementById(\"table-country-pop2\").innerText = \"\";\n                document.getElementById(\"table-country-name2\").innerText = \"\";\n                d3.select(this).classed(\"country-hover\", false);\n                if (d3.select(this).classed(\"country-click_hover\")) {\n                    d3.select(this).classed(\"country-click_hover\", false)\n                    d3.select(this).classed(\"country-click\", true)\n                }\n            })\n            .on(\"click\", function(d, i) {\n              if (d3.select(this).classed(\"country-filtered\")) {\n                // do nothing?\n              } else {\n                d3.selectAll(\".country\").classed(\"country-click\", false);\n                d3.select(this).classed(\"country-click_hover\", true);\n                document.getElementById(\"table-country-name1\").innerText = d.properties.name;\n                pop = readPopulation(d.properties.name, \"table-country-pop1\");\n              }\n            })\n\t    countryLabels = countriesGroup\n            .selectAll(\"g\")\n            .data(json.features)\n            .enter()\n            .append(\"g\")\n            .attr(\"class\", \"countryLabel\")\n            .attr(\"id\", function(d) {\n              return \"countryLabel\" + d.properties.iso_a3;\n            })\n         }\n      );\n\n"]}